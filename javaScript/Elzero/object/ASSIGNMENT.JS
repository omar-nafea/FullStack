let member = {
    // Properties
    name: "Elzero",
    age: 38,
    country: "Egypt",

    // Methods
    fullDetails: function() {
        return `My Name Is ${this.name}, My Age Is ${this.age}, I Live in ${this.country}`;
    },
};

console.log(member.name); // Elzero
console.log(member.age); // 38
console.log(member.country); // Egypt
console.log(member.fullDetails());
// My Name Is Elzero, My Age Is 38, I Live in Egypt
/*
// very important tip 
const name = data.name === const { name } = data;
console.log(name);
*/
// 2

// Method One
// Create Your Object Here
let objMethodOne = new Object({
    property: 1,
});

// function objMethodOne(property) {
//     Object.defineProperty(this, "property", {
//         value: property,
//     });
// }

// var objMethodOne11 = new objMethodOne(1);
// console.log(objMethodOne11.property); //1

console.log(objMethodOne.property); // "Method One"

//

// function Car(model, color) {
//     this.model = model;
//     this.color = color;
// }

// var c1 = new Car("BMW", "red");
// console.log(c1.model);

// Method Two
// Create Your Object Here

let objMethodTwo = {
    property: 1,
};

console.log(objMethodTwo.property); // "Method Two"

// Method Three
// Create Your Object Here

let objMethodThree = Object.create({});

objMethodThree.property = 1;

console.log(objMethodThree.property); // "Method Three"

// Method Four
// Create Your Object Here

// class Car {
//     constructor(maker, price) {
//         this.maker = maker;
//         this.price = price;
//     }

//     getInfo() {
//         console.log(this.maker + " costs : " + this.price);
//     }
// }
// var car1 = new Car("BMW", 100);
// car1.getInfo();
// var car2 = new Car("Audi", 150);
// car2.getInfo();
// console.log(car1["maker"]); // "Method Four"

// */
class objMethodFour {
    constructor(property) {
        this.property = property;
    }

    // getInfo() {
    //     console.log(this.property + " value : ");
    // }
}

let objMethod4 = new objMethodFour(1);

console.log(objMethod4.property); // "Method Four"

// 3

let a = 1;

let threeNums = {
    b: 2,
    c: 3,
    d: 4,
};

let twoNums = {
    e: 5,
    f: 6,
};

// Create Your Object Here in One Line

let finalObject = Object.assign(a, threeNums, twoNums);

console.log(finalObject);

/*
  a: 1
  b: 2
  c: 3
  d: 4
  e: 5
  f: 6
  */

// 4

// The Object To Work With
let myFavGames = {
    "Trinity Universe": {
        publisher: "NIS America",
        price: 40,
    },
    "Titan Quest": {
        publisher: "THQ",
        bestThree: {
            one: "Immortal Throne",
            two: "RagnarÃ¶k",
            three: "Atlantis",
        },
        price: 50,
    },
    YS: {
        publisher: "Falcom",
        bestThree: {
            one: "Oath in Felghana",
            two: "Ark Of Napishtim",
            three: "origin",
        },
        price: 40,
    },
};

// Code One => How To Get Object Length ?
let objectLength = Object.keys(myFavGames).length;

for (let i = 0; i < objectLength; i++) {
    let name = Object.keys(myFavGames)[i];
    console.log(`The Game Name Is ${name}`);
    console.log(`The Publisher Is ${Object.values(myFavGames)[i].publisher}`);
    console.log(`The Price Is ${Object.values(myFavGames)[i].price}`);

    // Check If Nested Object Has Property (bestThree)
    if (myFavGames[name].hasOwnProperty("bestThree")) {
        console.log("- Game Has Releases");
        console.log(`First => ${myFavGames[name].bestThree.one}`);
        console.log(`Second => ${myFavGames[name].bestThree.two}`);
        console.log(`Third => ${myFavGames[name].bestThree.three}`);
    }
    console.log("#".repeat(20));
}

// object methods
// The hasOwnProperty() method returns a boolean indicating whether the object has the
// specified property as its own property(as opposed to inheriting it).